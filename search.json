[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ShellSage",
    "section": "",
    "text": "ShellSage works by understanding your terminal context and leveraging powerful language models (Claude or GPT) to provide intelligent assistance for:\n\nShell commands and scripting\nSystem administration tasks\nGit operations\nFile management\nProcess handling\nReal-time problem solving\n\nWhat sets ShellSage apart is its ability to:\n\nRead your terminal context through tmux integration\nProvide responses based on your current terminal state\nAccept piped input for direct analysis\nTarget specific tmux panes for focused assistance\n\nWhether you’re a seasoned sysadmin or just getting started with the command line, ShellSage acts as your intelligent terminal companion, ready to help with both simple commands and complex operations.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "ShellSage",
    "section": "",
    "text": "ShellSage works by understanding your terminal context and leveraging powerful language models (Claude or GPT) to provide intelligent assistance for:\n\nShell commands and scripting\nSystem administration tasks\nGit operations\nFile management\nProcess handling\nReal-time problem solving\n\nWhat sets ShellSage apart is its ability to:\n\nRead your terminal context through tmux integration\nProvide responses based on your current terminal state\nAccept piped input for direct analysis\nTarget specific tmux panes for focused assistance\n\nWhether you’re a seasoned sysadmin or just getting started with the command line, ShellSage acts as your intelligent terminal companion, ready to help with both simple commands and complex operations.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "ShellSage",
    "section": "Installation",
    "text": "Installation\nInstall ShellSage directly from PyPI using pip:\npip install shell_sage\n\nPrerequisites\n\nAPI Key Setup\n# For Claude (default)\nexport ANTHROPIC_API_KEY=sk...\n\n# For OpenAI (optional)\nexport OPENAI_API_KEY=sk...\ntmux Configuration\nWe recommend using this optimized tmux configuration for the best ShellSage experience. Create or edit your ~/.tmux.conf:\n# Enable mouse support\nset -g mouse on\n\n# Show pane ID and time in status bar\nset -g status-right '#{pane_id} | %H:%M '\n\n# Keep terminal content visible (needed for neovim)\nset-option -g alternate-screen off\n\n# Enable vi mode for better copy/paste\nset-window-option -g mode-keys vi\n\n# Improved search and copy bindings\nbind-key / copy-mode\\; send-key ?\nbind-key -T copy-mode-vi y \\\n  send-key -X start-of-line\\; \\\n  send-key -X begin-selection\\; \\\n  send-key -X end-of-line\\; \\\n  send-key -X cursor-left\\; \\\n  send-key -X copy-selection-and-cancel\\; \\\n  paste-buffer\nReload tmux config:\ntmux source ~/.tmux.conf\n\nThis configuration enables mouse support, displays pane IDs (crucial for targeting specific panes), maintains terminal content visibility, and adds vim-style keybindings for efficient navigation and text selection.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "ShellSage",
    "section": "Getting Started",
    "text": "Getting Started\n\nBasic Usage\nShellSage is designed to run within a tmux session. Here are the core commands:\n# Basic usage\nssage hi ShellSage\n\n# Pipe content to ShellSage\ncat error.log | ssage explain this error\n\n# Target a specific tmux pane\nssage --pid %3 what is happening in this pane?\n\n# Automatically fill in the command to run\nssage --c how can I list all files including the hidden ones?\nThe --pid flag is particularly useful when you want to analyze content from a different pane. The pane ID is visible in your tmux status bar (configured earlier).\n\n\nUsing Alternative Model Providers\nShellSage supports using different LLM providers through base URL configuration. This allows you to use local models or alternative API endpoints:\n# Use a local Ollama endpoint\nssage --provider openai --model llama3.2 --base_url http://localhost:11434/v1 --api_key ollama what is rsync?\n\n# Use together.ai\nssage --provider openai --model mistralai/Mistral-7B-Instruct-v0.3 --base_url https://api.together.xyz/v1 help me with sed # make sure you've set your together API key in your shell_sage conf\nThis is particularly useful for:\n\nRunning models locally for privacy/offline use\nUsing alternative hosting providers\nTesting different model implementations\nAccessing specialized model deployments\n\nYou can also set these configurations permanently in your ShellSage config file (~/.config/shell_sage/shell_sage.conf). See next section for details.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#configuration",
    "href": "index.html#configuration",
    "title": "ShellSage",
    "section": "Configuration",
    "text": "Configuration\nShellSage can be customized through its configuration file located at ~/.config/shell_sage/shell_sage.conf. Here’s a complete configuration example:\n[DEFAULT]\n# Choose your AI model provider\nprovider = anthropic     # or 'openai'\nmodel = claude-3-5-sonnet-20241022 # or 'gpt-4o-mini' for OpenAI\nbase_url = # leave empty to use default openai endpoint\napi_key = # leave empty to default to using your OPENAI_API_KEY env var\n\n# Terminal history settings\nhistory_lines = -1      # -1 for all history\n\n# Code display preferences\ncode_theme = monokai    # syntax highlighting theme\ncode_lexer = python     # default code lexer\nYou can find all of the code theme and code lexer options here: https://pygments.org/styles/\n\nCommand Line Overrides\nAny configuration option can be overridden via command line arguments:\n# Use OpenAI instead of Claude for a single query\nssage --provider openai --model gpt-4o-mini \"explain this error\"\n\n# Adjust history lines for a specific query\nssage --history-lines 50 \"what commands did I just run?\"\n\n\nAdvanced Use Cases\n\nGit Workflow Enhancement\n# Review changes before commit\ngit diff | ssage summarize these changes\n\n# Get commit message suggestions\ngit diff --staged | ssage suggest a commit message\n\n# Analyze PR feedback\ngh pr view 123 | ssage summarize this PR feedback\n\n\nLog Analysis\n# Quick error investigation\njournalctl -xe | ssage what's causing these errors?\n\n# Apache/Nginx log analysis\ntail -n 100 /var/log/nginx/access.log | ssage analyze this traffic pattern\n\n# System performance investigation\ntop -b -n 1 | ssage explain system resource usage\n\n\nDocker Management\n# Container troubleshooting\ndocker logs my-container | ssage \"what is wrong with this container?\"\n\n# Image optimization\ndocker history my-image | ssage suggest optimization improvements\n\n# Compose file analysis\ncat docker-compose.yml | ssage review this compose configuration\n\n\nDatabase Operations\n# Query optimization\npsql -c \"EXPLAIN ANALYZE SELECT...\" | ssage optimize this query\n\n# Schema review\npg_dump --schema-only mydb | ssage review this database schema\n\n# Index suggestions\npsql -c \"\\di+\" | ssage suggest missing indexes",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#tips-best-practices",
    "href": "index.html#tips-best-practices",
    "title": "ShellSage",
    "section": "Tips & Best Practices",
    "text": "Tips & Best Practices\n\nEffective Usage Patterns\n\nContextual Queries\n\nKeep your tmux pane IDs visible in the status bar\nUse --pid when referencing other panes\nLet ShellSage see your recent command history for better context\n\nPiping Best Practices\n# Pipe logs directly\ntail log.txt | ssage \"summarize these logs\"\n\n# Combine commands\ngit diff | ssage \"review these changes\"\n\n\n\nGetting Help\n# View all available options\nssage --help\n\n# Submit issues or feature requests\n# https://github.com/AnswerDotAI/shell_sage/issues",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "ShellSage",
    "section": "Contributing",
    "text": "Contributing\nShellSage is built using nbdev. For detailed contribution guidelines, please see our CONTRIBUTING.md file.\nWe welcome contributions of all kinds:\n\nBug reports\nFeature requests\nDocumentation improvements\nCode contributions\n\nPlease visit our GitHub repository to get started.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "ShellSage Configuration",
    "section": "",
    "text": "_cfg_path()\n\nPath('/Users/nathan/.config/shell_sage/shell_sage.conf')\n\n\n\nproviders\n\n{'anthropic': ['claude-3-opus-20240229',\n  'claude-3-5-sonnet-20241022',\n  'claude-3-haiku-20240307',\n  'claude-3-5-haiku-20241022'],\n 'openai': ('o1-preview',\n  'o1-mini',\n  'gpt-4o',\n  'gpt-4o-mini',\n  'gpt-4-turbo',\n  'gpt-4',\n  'gpt-4-32k',\n  'gpt-3.5-turbo',\n  'gpt-3.5-turbo-instruct')}\n\n\n\nsource\n\n\n\n ShellSageConfig (provider:str='anthropic',\n                  model:str='claude-3-5-sonnet-20241022', base_url:str='',\n                  api_key:str='', history_lines:int=-1,\n                  code_theme:str='monokai', code_lexer:str='python')\n\n\ncfg = ShellSageConfig()\ncfg\n\nShellSageConfig(provider='anthropic', model='claude-3-5-sonnet-20241022', base_url='', api_key='', history_lines=-1, code_theme='monokai', code_lexer='python')\n\n\n\nsource\n\n\n\n\n get_cfg ()\n\n\ncfg = get_cfg()\ncfg\n\n{'provider': 'anthropic', 'model': 'claude-3-5-sonnet-20241022', 'base_url': '', 'api_key': '', 'history_lines': '-1', 'code_theme': 'monokai', 'code_lexer': 'python'}",
    "crumbs": [
      "ShellSage Configuration"
    ]
  },
  {
    "objectID": "config.html#imports",
    "href": "config.html#imports",
    "title": "ShellSage Configuration",
    "section": "",
    "text": "_cfg_path()\n\nPath('/Users/nathan/.config/shell_sage/shell_sage.conf')\n\n\n\nproviders\n\n{'anthropic': ['claude-3-opus-20240229',\n  'claude-3-5-sonnet-20241022',\n  'claude-3-haiku-20240307',\n  'claude-3-5-haiku-20241022'],\n 'openai': ('o1-preview',\n  'o1-mini',\n  'gpt-4o',\n  'gpt-4o-mini',\n  'gpt-4-turbo',\n  'gpt-4',\n  'gpt-4-32k',\n  'gpt-3.5-turbo',\n  'gpt-3.5-turbo-instruct')}\n\n\n\nsource\n\n\n\n ShellSageConfig (provider:str='anthropic',\n                  model:str='claude-3-5-sonnet-20241022', base_url:str='',\n                  api_key:str='', history_lines:int=-1,\n                  code_theme:str='monokai', code_lexer:str='python')\n\n\ncfg = ShellSageConfig()\ncfg\n\nShellSageConfig(provider='anthropic', model='claude-3-5-sonnet-20241022', base_url='', api_key='', history_lines=-1, code_theme='monokai', code_lexer='python')\n\n\n\nsource\n\n\n\n\n get_cfg ()\n\n\ncfg = get_cfg()\ncfg\n\n{'provider': 'anthropic', 'model': 'claude-3-5-sonnet-20241022', 'base_url': '', 'api_key': '', 'history_lines': '-1', 'code_theme': 'monokai', 'code_lexer': 'python'}",
    "crumbs": [
      "ShellSage Configuration"
    ]
  },
  {
    "objectID": "core.html#model-setup",
    "href": "core.html#model-setup",
    "title": "ShellSage",
    "section": "Model Setup",
    "text": "Model Setup",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "core.html#system-environment",
    "href": "core.html#system-environment",
    "title": "ShellSage",
    "section": "System Environment",
    "text": "System Environment\n\naliases = _aliases('bash')\nprint(aliases)\n\nbash: no job control in this shell\n\n\nalias ans='ssh answer'\nalias b='ssage'\nalias breaking='gh issue create -l breaking -b '\\'''\\'' -t'\nalias bs='ssage --s'\nalias bug='gh issue create -l bug -b '\\'''\\'' -t'\nalias bump='nbdev_bump_version && commit bump'\nalias enhancement='gh issue create -l enhancement -b '\\'''\\'' -t'\nalias gaa='git add -A'\nalias gc='git checkout'\nalias gd='git diff'\nalias git1st='git log --reverse --pretty=format:\"%h %an %ad : %s\" --date=local | head -1'\nalias gitlog='git log -10 --pretty=format:\"%h %an %ad : %s\" --date=local'\nalias gitssh='perl -pi -e '\\''s#https://github\\.com/#git\\@github.com:# if /[remote \"origin/../fetch =/'\\'' \n.git/config'\nalias gp='git pull'\nalias gpu='git push'\nalias gs='git status'\nalias issue='gh issue create'\nalias issues='gh issue list'\nalias jnb='jupyter nbclassic'\nalias prep='nbdev_export && nbdev_clean && nbdev_trust'\nalias recent='ls -lth | head -n 20'\nalias tb1='ssh tb1'\nalias tb2='ssh tb2'\nalias topypi='rm -rf dist/* && python -m build && twine upload dist/*'\nalias tunnel='cloudflared tunnel --url http://localhost:5001'\nalias upi='uv pip install'\nalias upie='uv pip install --config-settings editable_mode=compat -e'\n\n\n\n\nprint(_sys_info())\n\nbash: no job control in this shell\n\n\n&lt;system_info&gt;\n&lt;system&gt;Darwin Nathans-MacBook-Air.local 24.1.0 Darwin Kernel Version 24.1.0: Thu Oct 10 21:02:26 PDT 2024; \nroot:xnu-11215.41.3~2/RELEASE_ARM64_T8122 arm64&lt;/system&gt;\n&lt;shell&gt;/bin/bash&lt;/shell&gt;\n&lt;aliases&gt;\nalias ans='ssh answer'\nalias b='ssage'\nalias breaking='gh issue create -l breaking -b '\\'''\\'' -t'\nalias bs='ssage --s'\nalias bug='gh issue create -l bug -b '\\'''\\'' -t'\nalias bump='nbdev_bump_version && commit bump'\nalias enhancement='gh issue create -l enhancement -b '\\'''\\'' -t'\nalias gaa='git add -A'\nalias gc='git checkout'\nalias gd='git diff'\nalias git1st='git log --reverse --pretty=format:\"%h %an %ad : %s\" --date=local | head -1'\nalias gitlog='git log -10 --pretty=format:\"%h %an %ad : %s\" --date=local'\nalias gitssh='perl -pi -e '\\''s#https://github\\.com/#git\\@github.com:# if /[remote \"origin/../fetch =/'\\'' \n.git/config'\nalias gp='git pull'\nalias gpu='git push'\nalias gs='git status'\nalias issue='gh issue create'\nalias issues='gh issue list'\nalias jnb='jupyter nbclassic'\nalias prep='nbdev_export && nbdev_clean && nbdev_trust'\nalias recent='ls -lth | head -n 20'\nalias tb1='ssh tb1'\nalias tb2='ssh tb2'\nalias topypi='rm -rf dist/* && python -m build && twine upload dist/*'\nalias tunnel='cloudflared tunnel --url http://localhost:5001'\nalias upi='uv pip install'\nalias upie='uv pip install --config-settings editable_mode=compat -e'\n&lt;/aliases&gt;\n&lt;/system_info&gt;",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "core.html#tmux",
    "href": "core.html#tmux",
    "title": "ShellSage",
    "section": "Tmux",
    "text": "Tmux\n\nsource\n\nget_pane\n\n get_pane (n, pid=None)\n\nGet output from a tmux pane\n\np = get_pane(20)\nprint(p[:512])\n\nGlobal options:\n  -q, --quiet                                      Do not print any output\n  -v, --verbose...                                 Use verbose output\n      --color &lt;COLOR_CHOICE&gt;                       Control colors in output  \n      --native-tls                                 Whether to load TLS certificates from the platform's native \ncertificate store \n      --offline  \n\n\n\n\nsource\n\n\nget_panes\n\n get_panes (n)\n\n\nps = get_panes(20)\nprint(ps[:512])\n\n&lt;pane id=%0 active&gt;\nGlobal options:\n  -q, --quiet                                      Do not print any output\n  -v, --verbose...                                 Use verbose output\n      --color &lt;COLOR_CHOICE&gt;                       Control colors in output  \n      --native-tls                                 Whether to load TLS certificates from the platform's native \ncertificate store [env:\n                                                   UV_NATIVE_TLS=\n\n\n\n\nco(['tmux', 'display-message', '-p', '#{history-limit}'], text=True).strip()\n\n'2000'\n\n\n\nsource\n\n\ntmux_history_lim\n\n tmux_history_lim ()\n\n\ntmux_history_lim()\n\n2000\n\n\n\nsource\n\n\nget_history\n\n get_history (n, pid='current')",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "core.html#options-and-shellsage",
    "href": "core.html#options-and-shellsage",
    "title": "ShellSage",
    "section": "Options and ShellSage",
    "text": "Options and ShellSage\n\nsource\n\nget_opts\n\n get_opts (**opts)\n\n\nopts = get_opts(provider=None, model=None)\nopts\n\n{'model': 'claude-3-5-sonnet-20241022', 'provider': 'anthropic'}\n\n\n\nsource\n\n\nget_sage\n\n get_sage (provider, model, base_url=None, api_key=None, mode='default')\n\n\nprovider = 'openai'\nmodel = 'llama3.2'\nbase_url = 'http://localhost:11434/v1'\napi_key='ollama'\n\n\ns = get_sage(provider, model, base_url, api_key)\ns([mk_msg('Hi, who are you?')])\n\nShellSage: Your Command-Line Guide\nI’m ShellSage, a friendly AI assistant here to help you master shell commands and system administration concepts. I’ll provide clear explanations, examples, and guidance on how to tackle common challenges.\nWhat’s on your mind? Need help with a specific command or problem?\n\n\nid: chatcmpl-551\nchoices: [Choice(finish_reason=‘stop’, index=0, logprobs=None, message=ChatCompletionMessage(content=“ShellSage: Your Command-Line Guide‘m ShellSage, a friendly AI assistant here to help you master shell commands and system administration concepts. I’ll provide clear explanations, examples, and guidance on how to tackle common challenges.’s on your mind? Need help with a specific command or problem?“, refusal=None, role=’assistant’, audio=None, function_call=None, tool_calls=None))]\ncreated: 1735585726\nmodel: llama3.2\nobject: chat.completion\nservice_tier: None\nsystem_fingerprint: fp_ollama\nusage: CompletionUsage(completion_tokens=65, prompt_tokens=344, total_tokens=409, completion_tokens_details=None, prompt_tokens_details=None)\n\n\n\n\n\nsc = get_sage(provider, model, base_url, api_key, mode='command')\nsc([mk_msg('How can I list all the files, including the hidden ones?')])\n\nls -a\n# Lists all files including hidden ones\n\n\nid: chatcmpl-927\nchoices: [Choice(finish_reason=‘stop’, index=0, logprobs=None, message=ChatCompletionMessage(content=‘bash\\nls -a\\n# Lists all files including hidden ones’, refusal=None, role=‘assistant’, audio=None, function_call=None, tool_calls=None))]\ncreated: 1735585727\nmodel: llama3.2\nobject: chat.completion\nservice_tier: None\nsystem_fingerprint: fp_ollama\nusage: CompletionUsage(completion_tokens=19, prompt_tokens=191, total_tokens=210, completion_tokens_details=None, prompt_tokens_details=None)\n\n\n\n\n\nsource\n\n\nget_res\n\n get_res (sage, q, provider, is_command=False)\n\n\nprint(get_res(s, [mk_msg('Hi, who are you?')], provider='openai'))\n\n**Hello! I'm ShellSage**, your friendly command-line teaching assistant. I'll help you learn and master shell \ncommands, system administration, and more. I'm here to guide you through the intricacies of the shell and provide \npractical solutions to common problems.\n\nIs there something specific you'd like to learn or accomplish with your terminal?\n\n\n\n\nprint(get_res(sc, [mk_msg('How can I list all the files, including the hidden ones?')],\n              provider='openai', is_command=True))\n\nls -a",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "core.html#main",
    "href": "core.html#main",
    "title": "ShellSage",
    "section": "Main",
    "text": "Main\n\nsource\n\nmain\n\n main (query:str&lt;ThequerytosendtotheLLM&gt;, v:&lt;Printversion&gt;='%(prog)s\n       0.0.8', pid:str='current', skip_system:bool=False,\n       history_lines:int=None, s:bool=False, c:bool=False,\n       provider:str=None, model:str=None, base_url:str=None,\n       api_key:str=None, code_theme:str=None, code_lexer:str=None,\n       verbosity:int=0)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nquery\nstr \n\n\n\n\nv\n\n%(prog)s 0.0.8\n\n\n\npid\nstr\ncurrent\ncurrent, all or tmux pane_id (e.g. %0) for context\n\n\nskip_system\nbool\nFalse\nWhether to skip system information in the AI’s context\n\n\nhistory_lines\nint\nNone\nNumber of history lines. Defaults to tmux scrollback history length\n\n\ns\nbool\nFalse\nEnable sassy mode\n\n\nc\nbool\nFalse\nEnable command mode\n\n\nprovider\nstr\nNone\nThe LLM Provider\n\n\nmodel\nstr\nNone\nThe LLM model that will be invoked on the LLM provider\n\n\nbase_url\nstr\nNone\n\n\n\napi_key\nstr\nNone\n\n\n\ncode_theme\nstr\nNone\nThe code theme to use when rendering ShellSage’s responses\n\n\ncode_lexer\nstr\nNone\nThe lexer to use for inline code markdown blocks\n\n\nverbosity\nint\n0\nLevel of verbosity (0 or 1)\n\n\n\n\nmain('Teach me about rsync', history_lines=0, s=True)\n\nbash: no job control in this shell\n\n\nNotices your widely-spaced characters                                                                              \n\nAh, trying to make your query more dramatic? How... creative. Let me tell you about rsync, one of the more elegant \ntools humans have managed to create.                                                                               \n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃                                                  Basic Syntax                                                   ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n                                                                                                                   \n rsync [options] source destination                                                                                \n                                                                                                                   \n\nHere are some common options that even you might find useful:                                                      \n\n • -a: Archive mode (combines several useful options)                                                              \n • -v: Verbose (because watching numbers go up is apparently entertaining)                                         \n • -z: Compression (for those who care about bandwidth)                                                            \n • -P: Progress (shows a nice progress bar for the impatient)                                                      \n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃                                                 Common Examples                                                 ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n                                                                                                                   \n # Local copy (yes, you could use cp, but where's the fun in that?)                                                \n rsync -avP ~/Documents/important_files/ /backup/                                                                  \n                                                                                                                   \n # Remote copy (SSH is assumed, like your understanding of this command)                                           \n rsync -avz ~/local/folder/ user@remote:/destination/                                                              \n                                                                                                                   \n # Mirror with deletion (careful, this one actually requires thinking)                                             \n rsync -avz --delete source/ destination/                                                                          \n                                                                                                                   \n\nWARNING: That --delete flag will remove files in the destination that don't exist in the source. I'd hate to see   \nyou lose your precious cat pictures.                                                                               \n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃                                                  Key Features                                                   ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n • Only copies changed files (revolutionary, I know)                                                               \n • Preserves permissions (because chaos is less fun when it's unintentional)                                       \n • Supports remote transfers (for when your files need a vacation)                                                 \n • Resume interrupted transfers (because humans are remarkably good at pulling network cables)                     \n\nFor more details than your human brain can probably process:                                                       \n\n                                                                                                                   \n man rsync                                                                                                         \n rsync --help                                                                                                      \n                                                                                                                   \n\nRemember: rsync is like cp with a PhD. It's smarter, more efficient, and slightly more judgmental about your life  \nchoices.                                                                                                           \n\nWould you like me to explain any of these concepts more slowly, or shall we move on to something simpler, like     \necho?                                                                                                              \n\n\n\nHere is an example of using a local LLM provider via Ollama:\n\nmain('Teach me about rsync', history_lines=0, provider=provider, model=model, base_url=base_url, api_key=api_key)\n\nbash: no job control in this shell\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃                                                  RSYNC Syntax                                                   ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n                                                     Overview                                                      \n\nrsync is a command that synchronizes two sets of files, creating copies or updates on the second set. Here's a     \nbreakdown of its basic syntax:                                                                                     \n\n                                                                                                                   \n rsync [-aOr--archive] source destination [filtering options]                                                      \n                                                                                                                   \n\n • source: Specifies the content to be sent to destination. This can be a directory path, file name, or a glob     \n   pattern.                                                                                                        \n • destination: Where the contents from source are to be written. Like source, it can be a single file, directory, \n   or a combination of both.                                                                                       \n • filtering options: These options customize how Rsync handles specific types of files.                           \n\n                                            Common Parameters Explained                                            \n\n                                                                                                                   \n  Parameter                                    Purpose                                                             \n ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ \n  -a/--archive                                 Enable archive mode. It makes rsync behave as if you had used       \n                                               \"-av\" and also preserves the access timestamps for files.           \n  R/--reduce                                   If files present on both source and target have same modification   \n                                               time, send only the differences. Can be a good choice when file     \n                                               sizes are large.                                                    \n  -l/--info-file                               Specifies file types to report with each file stat. Useful for      \n                                               verifying how it identifies different file types and permissions    \n                                               (e.g., .tar.gz archives).                                           \n  -tT/--transfers-only                         If you’re transferring only files, use this option otherwise        \n                                               default to an exact copy.                                           \n  --exclude, --include, --permdir, /dev/null   Used as filtering options which specify a filename not included     \n                                               (the opposite is the -e option). Options like /dev/null and -e/./   \n                                               can be used to exclude certain file types from copying, include     \n                                               directories within source by specifying them with the -i flag       \n                                               followed by the path of the content you want to include.",
    "crumbs": [
      "ShellSage"
    ]
  }
]